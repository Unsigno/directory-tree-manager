const fs = require('promisify-fs');
const path = require('path');
const Promise = require('bluebird');

const CWD = process.cwd(); // Current Working Directory ( where is fired the command )

// this class checks if base directory exists ( suplied by name param on constructor, or get the current process directory ) and generate all childs
class RootDirectory {

	constructor(name, childs){

		// if name isn't provided , we set CWD as base directory
		if(name instanceof Array){
			childs = name;
			name = CWD;
		}

		this.name = name;
		this.childs = childs || [];
	}

	generate() {

		let self = this;

		// check directory exists
		return fs.folderExists(this.name).then(function(path){

			// check absolute path exists
			if(!path || !path.abs_path) throw new Error(`Root directory ${self.name} doesn't exists`);

			let fullPath = path.abs_path;

			// wait for all sub-files and sub-folders to be created
			return Promise.all(self.childs.map(function(child){
				return child.generate(fullPath).reflect();
			})).each(function(inspection){
				// check if some promise was rejected
				if(!inspection.isFulfilled()) throw inspection.reason();
			})

		});
	}

	destroy() {

		let self = this;

		// check directory exists
		return fs.folderExists(this.name).then(function(path){

			// check absolute path exists
			if(!path || !path.abs_path) throw new Error(`Root directory ${self.name} doesn't exists`);

			let fullPath = path.abs_path;

			// wait for all sub-files and sub-folders to be destroyed
			return Promise.all(self.childs.map(function(child){
				return child.destroy(fullPath).reflect();
			})).each(function(inspection){
				// check if some promise was rejected
				if(!inspection.isFulfilled()) throw inspection.reason();
			})
		})

	}

}

//this class create a directory with the name supplied to constructor , will be created on the current process directory or relative to the path supplied on generate method , this relative path will be supplied to the parent if exists
class Directory {

	constructor(name, childs) {
		this.name = name;
		this.childs = childs || [];
	}

	generate(basePath) {

		let self = this;
		let fullPath = path.join((basePath || CWD), this.name);

		// create the directory
		return fs.addFolder(fullPath).then(function(f){

			// wait for all the sub-files and sub-folders to be created
			return Promise.all(self.childs.map(function(child){
				return child.generate(fullPath).reflect();
			})).each(function(inspection){
				// check if some promise was rejected
				if(!inspection.isFulfilled()) throw inspection.reason();
			});
		});

	}

	destroy(basePath) {

		let self = this;
		let fullPath = path.join((basePath || CWD), self.name);

		// wait for all the sub-files and sub-folders to be destroyed
		return Promise.all(self.childs.map(function(child){
			return child.destroy(fullPath).reflect();
		})).each(function(inspection){
			// check if some promise was rejected
			if(!inspection.isFulfilled()) throw inspection.reason();
		}).then(function(inspection){
			// destroy the directory
			return fs.delFolder(fullPath);
		});

	}

}

//this class create a file with the name supplied to constructor , will be created on the current process directory or relative to the path supplied on generate method , this relative path will be supplied to the parent if exists
//the content of the file can be supplied by the content param on constructor , or generated by a function reciving (fileName, resolve, reject);
class File {

	constructor(name, content) {
		this.name = name;
		this.content = content || "";
	}

	generate(basePath) {

		let self = this;
		let fullPath = path.join((basePath || CWD), self.name);

		if( typeof self.content != 'function' ){

			return fs.writeFile(fullPath, self.content);

		}else{

			return new Promise(function(resolve, reject){
				self.content(self.name, resolve, reject);
			}).then(function(content){
				return fs.writeFile(fullPath, content);
			})

		}

	}

	destroy(basePath) {

		let self = this;
		let fullPath = path.join((basePath || CWD), self.name);

		return fs.delFile(fullPath);

	}
}

module.exports = {
	RootDirectory: RootDirectory,
	Directory: Directory,
	File: File
};